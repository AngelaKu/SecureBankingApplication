import hashlib
import json
import os
import getpass
import time
import re
"""# File to store user data"""
DATABASE_FILE = 'banking_data.json'
TRANSACTION_LOG_FILE = 'transaction_log.txt'
"""# Load existing user data from file or create a new database"""
if os.path.exists(DATABASE_FILE):
    with open(DATABASE_FILE, 'r') as file:
        users = json.load(file)
else:
    users = {}
# Load or initialize transaction log
if not os.path.exists(TRANSACTION_LOG_FILE):
    open(TRANSACTION_LOG_FILE, 'w').close()
# Helper function to hash passwords
def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()
# Helper function to validate username format
def validate_username(username):
    return re.match(r"^[a-zA-Z0-9]{5,15}$", username) is not None
# Helper function to validate password format
def validate_password(password):
    return (len(password) >= 8 and
            re.search(r"[A-Z]", password) and
            re.search(r"[a-z]", password) and
            re.search(r"[0-9]", password) and
            re.search(r"[\W_]", password))
# Function to save data to a file
def save_data():
    with open(DATABASE_FILE, 'w') as file:
        json.dump(users, file)
# Function to create a new user account
def create_account():
    while True:
        username = getpass.getpass("Enter a username (5-15 alphanumeric characters, or 'exit' to go back): ")
        if username.lower() == 'exit':
            return
        if not validate_username(username):
            print("Invalid username. It must be 5-15 characters long and contain only letters and numbers.")
            continue
        if username in users:
            print("Username already exists. Please choose a different username.")
            continue
        break

    while True:
        password = getpass.getpass("Enter a password (minimum 8 characters, including uppercase, lowercase, number, and special character, or 'exit' to go back): ")
        if password.lower() == 'exit':
            return
        confirm_password = getpass.getpass("Confirm password (or 'exit' to go back): ")
        if confirm_password.lower() == 'exit':
            return
        if password != confirm_password:
            print("Passwords do not match. Please try again.")
            continue
        if not validate_password(password):
            print("Password must be at least 8 characters long and include uppercase, lowercase, number, and special character.")
            continue
        break

    users[username] = {
        'password': hash_password(password),
        'balance': 0.0,
        'login_attempts': 0,
        'is_blocked': False,
        'blocked_until': None
    }
    save_data()
    print(f"Account created successfully for {username}.")
# Function to log transactions
def log_transaction(username, transaction):
    timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
    log_entry = f"{timestamp} - {username}: {transaction}\n"
    with open(TRANSACTION_LOG_FILE, 'a') as file:
        file.write(log_entry)
# Function to handle deposit
def deposit(username):
    while True:
        amount_input = input("Enter the amount to deposit (or 'exit' to go back):")
        if amount_input.lower() == 'exit':
            return
        try:
            amount = float(amount_input)
            if amount <= 0:
                print("Amount must be positive.")
                continue
            break
        except ValueError:
            print("Invalid amount. Please enter a numeric value.")
    users[username]['balance'] += amount
    log_transaction(username, f"Deposit: +${amount:.2f}")
    save_data()
    print(f"${amount:.2f} deposited successfully.")
# Function to handle withdrawal
def withdraw(username):
    while True:
        amount_input = input("Enter the amount to withdraw (or 'exit' to go back):")
        if amount_input.lower() == 'exit':
            return
        try:
            amount = float(amount_input)
            if amount <= 0:
                print("Amount must be positive.")
                continue
            if users[username]['balance'] < amount:
                print("Insufficient funds. Withdrawal failed.")
                continue
            break
        except ValueError:
            print("Invalid amount. Please enter a numeric value.")
    users[username]['balance'] -= amount
    log_transaction(username, f"Withdraw: -${amount:.2f}")
    save_data()
    print(f"${amount:.2f} withdrawn successfully.")
# Function to check balance
def check_balance(username):
    print(f"Current balance: ${users[username]['balance']:.2f}")
# Function to transfer money between accounts
def transfer(username):
    while True:
        recipient = input("Enter the recipient's username (or 'exit' to go back):")
        if recipient.lower() == 'exit':
            return
        if recipient not in users or recipient == username:
            print("Invalid recipient username.")
            continue
        break
    while True:
        amount_input = input("Enter the amount to transfer (or 'exit' to go back):")
        if amount_input.lower() == 'exit':
            return
        try:
            amount = float(amount_input)
            if amount <= 0:
                print("Amount must be positive.")
                continue
            if users[username]['balance'] < amount:
                print("Insufficient funds. Transfer failed.")
                continue
            break
        except ValueError:
            print("Invalid amount. Please enter a numeric value.")
    users[username]['balance'] -= amount
    users[recipient]['balance'] += amount
    log_transaction(username, f"Transfer to {recipient}: -${amount:.2f}")
    log_transaction(recipient, f"Transfer from {username}: +${amount:.2f}")
    save_data()
    print(f"${amount:.2f} transferred successfully to {recipient}.")
# Function to handle login attempts and account lockout
def account_lockout(username):
    user_data = users[username]
    user_data['is_blocked'] = True
    user_data['blocked_until'] = time.time() + 10  # Block for 10 seconds
    print(f"Account for {username} has been temporarily blocked due to too many failed login attempts.")
    save_data()
# Function to authenticate user
def authenticate():
    username = getpass.getpass("Enter your username (or 'exit' to go back): ")
    if username.lower() == 'exit':
        return None
    if username not in users:
        print("Username not found.")
        return None

    user_data = users[username]
    if user_data['is_blocked']:
        if time.time() < user_data['blocked_until']:
            wait_time = int(user_data['blocked_until'] - time.time())
            print(f"Your account is temporarily blocked. Please wait {wait_time} seconds before trying again.")
            return None
        else:
            user_data['is_blocked'] = False
            user_data['login_attempts'] = 0

    while True:
        password = getpass.getpass("Enter your password (or 'exit' to go back): ")
        if password.lower() == 'exit':
            return None
        if user_data['password'] == hash_password(password):
            print("Login successful.")
            user_data['login_attempts'] = 0  # Reset the attempts on successful login
            return username
        else:
            user_data['login_attempts'] += 1
            print(f"Invalid password. {3 - user_data['login_attempts']} attempts remaining.")
            if user_data['login_attempts'] >= 3:
                account_lockout(username)
            save_data()
            return None
# Main banking menu
def banking_menu(username):
    while True:
        print("\nBanking Menu:")
        print("1. Deposit")
        print("2. Withdraw")
        print("3. Check Balance")
        print("4. Transfer")
        print("5. Logout")

        choice = input("Choose an option: ")

        if choice == '1':
            deposit(username)
        elif choice == '2':
            withdraw(username)
        elif choice == '3':
            check_balance(username)
        elif choice == '4':
            transfer(username)
        elif choice == '5':
            print("Logging out...")
            break
        else:
            print("Invalid choice. Please try again.")
# Main menu
def main():
    while True:
        print("\nMain Menu:")
        print("1. Create Account")
        print("2. Login")
        print("3. Exit")

        choice = input("Choose an option: ")

        if choice == '1':
            create_account()
        elif choice == '2':
            username = authenticate()
            if username:
                banking_menu(username)
        elif choice == '3':
            print("Exiting the system. Goodbye!")
            save_data()
            break
        else:
            print("Invalid choice. Please try again.")
# Run the main function to start the program
if __name__ == "__main__":
    main()
"""
# Account 1
# Username: Angelaku123
# Password: Password123%

# Account 2
# Username: ExtraAcc1
# Password: Account#2
"""





